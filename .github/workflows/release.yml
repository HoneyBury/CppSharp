# 工作流的名称，会显示在 GitHub 的 "Actions" 页面上
name: Create Project Release

# 触发条件
on:
  push:
    tags:
      - 'v*'

jobs:
  create-release-assets:
    name: Build, Document, and Release
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      # 步骤 1: 检出代码
      - name: Checkout repository code
        uses: actions/checkout@v4

      # 步骤 2: 安装 Pandoc, XeLaTeX, 完整的 Noto 字体并刷新缓存 (已修改)
      # 1. fonts-noto: 这是一个元数据包，会安装完整的 Noto 字体家族，包括 Sans, Serif, Mono 和 Emoji。
      # 2. fc-cache -fv: 强制刷新系统字体缓存，这是关键一步！
      - name: Install Pandoc, XeLaTeX, and full Noto font suite
        run: |
          sudo apt-get update
          sudo apt-get install -y pandoc texlive-xetex fonts-noto
          sudo fc-cache -fv

      # 步骤 3: 提取版本号并进行校验
      - name: Extract and Verify Version
        id: version_check
        run: |
          TAG_NAME=${{ github.ref_name }}
          echo "Git Tag: ${TAG_NAME}"
          
          CMAKE_VERSION=$(grep -oP 'project\(.*?VERSION \K[0-9]+\.[0-9]+\.[0-9]+' CMakeLists.txt)
          echo "CMake Version: ${CMAKE_VERSION}"
          if [ "${TAG_NAME#v}" != "$CMAKE_VERSION" ]; then
            echo "::error::Version mismatch! Git tag is '${TAG_NAME}' but CMake version is '${CMAKE_VERSION}'."
            exit 1
          fi
          
          echo "version=${CMAKE_VERSION}" >> $GITHUB_OUTPUT
          echo "tag_name=${TAG_NAME}" >> $GITHUB_OUTPUT

      # 步骤 4: 准备并生成发布文档 (使用更完整的字体配置)
      - name: Generate Release Documents
        run: |
          cp CHANGELOG.md version.md
          echo "Created version.md"
          
          PDF_FILENAME="version-${{ steps.version_check.outputs.version }}.pdf"
          
          # -V sansfont: 明确指定无衬线字体，这比 mainfont 更适合 Markdown 的默认输出
          pandoc version.md \
            --pdf-engine=xelatex \
            -V "sansfont:Noto Sans" \
            -o "${PDF_FILENAME}"
          
          echo "Generated ${PDF_FILENAME}"

      # 步骤 5: 创建 GitHub Release 并上传产物
      - name: Create GitHub Release and Upload Artifacts
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.version_check.outputs.tag_name }}
          body_path: CHANGELOG.md
          files: |
            version.md
            version-*.pdf