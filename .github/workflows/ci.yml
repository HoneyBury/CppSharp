# .github/workflows/ci.yml

name: C++ CI with Conan, CMake, and CPack

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build-test-package:
    name: ${{ matrix.os }} - ${{ matrix.build_type }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        build_type: [Debug, Release]

    runs-on: ${{ matrix.os }}

    steps:
      # 步骤 1: 检出代码
      - name: Checkout repository code
        uses: actions/checkout@v4

      # 步骤 2: 安装 CPack 所需的打包工具 (仅在需要时)
      - name: Install CPack Generators
        if: matrix.build_type == 'Release' && runner.os == 'Windows'
        run: choco install nsis

      # 步骤 3: 设置 Python 和 Conan 环境
      - name: Setup Python for Conan
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          
      - name: Install Conan and create default profile
        run: |
          pip install conan
          conan profile detect --force

      # 步骤 4: 缓存 Conan 包以加速构建
      - name: Cache Conan packages
        uses: actions/cache@v4
        with:
          path: ~/.conan2/p
          key: conan-${{ runner.os }}-${{ matrix.build_type }}-${{ hashFiles('**/conanfile.py') }}
          restore-keys: |
            conan-${{ runner.os }}-${{ matrix.build_type }}-

      # 步骤 5: 使用 Conan 安装依赖
      - name: Install dependencies with Conan
        run: conan install . --build=missing -s build_type=${{ matrix.build_type }}

      # (!!!) 最终修正步骤：以跨平台方式设置小写构建类型 (!!!)
      # 这个步骤是解决问题的关键，它保证能在所有环境下正常工作。
      - name: Set lowercase build type
        id: build_type_lc
        shell: bash # 强制在所有平台 (包括Windows) 上使用 bash
        run: |
          # 1. 使用合法的 Actions 表达式将 matrix.build_type 的值赋给一个 shell 变量
          TYPE_UC="${{ matrix.build_type }}"
          # 2. 在 shell 内部，使用纯粹的 bash 语法将变量转为小写，并输出
          echo "value=${TYPE_UC,,}" >> $GITHUB_OUTPUT

      # 步骤 6: 使用 CMake Presets 配置项目 (使用修正后的输出)
      - name: Configure CMake
        run: cmake --preset conan-${{ steps.build_type_lc.outputs.value }} -DBUILD_TESTING=ON

      # 步骤 7: 使用 CMake Presets 构建项目 (使用修正后的输出)
      - name: Build project with CMake
        run: cmake --build --preset conan-${{ steps.build_type_lc.outputs.value }}

      # 步骤 8: 运行单元测试 (仅在 Debug 模式下) (使用修正后的输出)
      - name: Run Unit Tests with CTest
        if: matrix.build_type == 'Debug'
        run: ctest --preset conan-${{ steps.build_type_lc.outputs.value }} --output-on-failure

      # 步骤 9: 使用 CPack 创建安装包 (仅在 Release 模式下)
      - name: Create package with CPack
        if: matrix.build_type == 'Release'
        run: cpack --preset conan-release

      # 步骤 10: 上传构建产物 (安装包)
      - name: Upload Build Artifacts
        if: matrix.build_type == 'Release'
        uses: actions/upload-artifact@v4
        with:
          name: myproject-package-${{ matrix.os }}
          path: |
            build/Release/
            build/
            *.deb
            *.rpm
            *.exe
            *.zip
            *.tar.gz
          if-no-files-found: ignore